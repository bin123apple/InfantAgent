/* src/App.css */
html {
  height: 100%;
  box-sizing: border-box; /* Apply box-sizing globally */
}
*, *:before, *:after {
  box-sizing: inherit; /* Inherit box-sizing */
}

body {
  height: 100%;
  margin: 0;
  padding: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  background-color: #f4f7f6;
  color: #333;
  /* Desktop: body does not scroll, .App manages its 100vh */
  overflow: hidden;
}

.App {
  display: flex;
  flex-direction: column;
  height: 100vh; /* App takes full viewport height */
  overflow: hidden; /* App itself does not scroll */
}

.App-header {
  background-color: #282c34;
  padding: 8px 15px;
  color: white;
  text-align: center;
  flex-shrink: 0; /* Header doesn't shrink */
  z-index: 10;
}

.App-main {
  display: flex;
  flex-grow: 1; /* Main area takes remaining vertical space */
  overflow: hidden; /* IMPORTANT: App-main does not scroll. Children will. */
  min-height: 0; /* For flex item context */
}

.left-panel {
  /* width is set by inline style from React state for resizer */
  /* flex-basis: 35%; Initial width before JS for non-resizable state */
  flex-shrink: 0; /* Critical for resizable panel */
  padding: 8px;
  display: flex; /* Use flex for internal structure */
  flex-direction: column;
  background-color: #fff;
  overflow: hidden; /* Let .chat-client handle its own scroll */
  position: relative; /* For certain positioning if needed, though not strictly for resizer */
}

.resizer {
  width: 5px;
  background-color: #ddd;
  cursor: col-resize;
  flex-shrink: 0;
  z-index: 5;
  /* On hover, you might want to make it slightly thicker or change color more visibly */
}
.resizer:hover, .resizer.dragging { /* Add a class for dragging state if you want */
  background-color: #999; /* More visible when hovering or dragging */
}


.right-panel-grid-container {
  flex-grow: 1; /* Takes up remaining space */
  min-width: 0; /* Allows it to shrink properly if left panel grows */
  padding: 0; /* No padding, gap provides spacing */
  display: grid;
  grid-template-columns: 1fr 1fr;
  grid-template-rows: 1fr 1fr;
  gap: 1px;
  background-color: #ddd; /* Separator color */
  overflow: hidden; /* Grid container itself doesn't scroll */
}

.grid-item {
  background-color: #fff;
  padding: 8px;
  display: flex; /* Use flex for internal structure (title + content) */
  flex-direction: column;
  overflow: hidden; /* Grid item itself does not scroll; children will */
  min-height: 0; /* Allows grid item to shrink and content inside to scroll */
}

.grid-item h3 {
  margin-top: 0;
  margin-bottom: 8px;
  font-size: 1em;
  color: #333;
  padding-bottom: 4px;
  border-bottom: 1px solid #eee;
  flex-shrink: 0; /* Title doesn't shrink */
}

/* Component wrappers within .left-panel or .grid-item */
.chat-client,
.terminal-client,
.vm-client,
.planner-client {
  display: flex;
  flex-direction: column;
  flex-grow: 1; /* Key: make these components take up available space in parent */
  overflow: hidden; /* They delegate scroll to specific inner areas */
  min-height: 0; /* Essential for flex children that need to scroll internally */
}

/* Specific Scrollable Content Areas */
.chat-client .messages-area {
  flex-grow: 1;
  overflow-y: auto; /* THIS IS A SCROLLABLE AREA */
  padding: 8px;
  margin-bottom: 8px;
  background-color: #f9f9f9;
  border-radius: 3px;
  min-height: 50px; /* To ensure it has some space even if empty */
}
.chat-client .input-area {
  flex-shrink: 0;
}

.terminal-client .terminal-container-wrapper {
  flex-grow: 1;
  min-height: 100px; /* Give terminal some minimum visible space */
  overflow: hidden; /* Xterm handles its own scroll within this */
  border-radius: 3px;
  background-color: #1e1e1e;
  position: relative; /* Helps xterm fit correctly */
}
.terminal-client .terminal-container-wrapper .xterm {
    height: 100% !important; /* Xterm should fill its wrapper */
    width: 100% !important;
    /* The xterm library itself creates scrollable viewports */
}
.terminal-client .terminal-status {
    font-size: 0.8em; margin-top: 4px; flex-shrink: 0;
}

.vm-client .nomachine-iframe-container {
  flex-grow: 1;
  min-height: 100px; /* Give iframe some minimum visible space */
  overflow: hidden; /* Iframe element has its own scrolling */
}
.vm-client .nomachine-iframe-container iframe {
  width: 100%; height: 100%; border: none;
}
.vm-client > p, .vm-client ol {
    flex-shrink: 0; margin-top: 3px; margin-bottom: 3px; font-size: 0.85em;
}
.vm-client ol { padding-left: 18px; }

.planner-client .planner-controls { flex-shrink: 0; }
.planner-client button { margin-bottom: 8px; padding: 6px 10px; font-size: 0.9em; }
.planner-client .planner-details-container {
  flex-grow: 1;
  overflow-y: auto; /* THIS IS A SCROLLABLE AREA */
  padding-right: 3px; /* For scrollbar visibility */
  min-height: 50px; /* To ensure it has some space */
}
.planner-details { background-color: #fff; padding: 0px; border-radius: 3px; }
/* ... other planner styles ... */
.planner-details p { margin: 4px 0; font-size: 0.9em; }
.planner-details h4 { margin-top: 8px; margin-bottom: 4px; font-size: 0.95em; }
.planner-details ul { list-style-type: none; padding-left: 0; }
.planner-details li { padding: 4px; font-size: 0.9em; border-bottom: 1px dashed #f0f0f0; }
.planner-details li:last-child { border-bottom: none; }


/* ... (Keep existing .message, .input-area, .vm-client .loading-message styles) ... */
.message { margin-bottom: 6px; padding: 4px 7px; border-radius: 3px; word-wrap: break-word; font-size: 0.95em; }
.message.you { background-color: #e1ffc7; text-align: right; margin-left: auto; max-width: 80%; }
.message.agent { background-color: #f0f0f0; text-align: left; margin-right: auto; max-width: 80%; }
.message.server, .message.system { background-color: #fffacd; font-style: italic; font-size: 0.85em;text-align: center; max-width: 90%; margin-left: auto; margin-right: auto; }
.input-area { display: flex; flex-shrink: 0; }
.input-area input { flex-grow: 1; padding: 7px; border: 1px solid #ccc; border-radius: 3px 0 0 3px; font-size: 0.95em; }
.input-area button { padding: 7px 12px; border: 1px solid #61dafb; background-color: #61dafb; color: white; cursor: pointer; border-radius: 0 3px 3px 0; border-left: none; font-size: 0.95em; }
.input-area button:disabled { background-color: #ccc; border-color: #ccc; cursor: not-allowed; }

.vm-client .loading-message,
.vm-client .error-message { padding: 8px; border-radius: 3px; margin: 8px 0; font-size: 0.85em; flex-shrink: 0;}
.vm-client .loading-message { background-color: #e6f7ff; border: 1px solid #91d5ff; }
.vm-client .error-message { background-color: #fff2f0; border: 1px solid #ffccc7; color: #a8071a; }


/* --- Responsive Adjustments --- */

@media (max-width: 1024px) { /* Tablets and Smaller Desktops */
  .left-panel {
    /* JS handles width; min/max constraints in JS if needed */
  }
  .right-panel-grid-container {
    /* flex-grow handles width */
  }
  .grid-item { padding: 6px; }
  .grid-item h3 { font-size: 0.95em; margin-bottom: 6px; }
}

@media (max-width: 767px) { /* Mobile Phones */
  html, body {
    overflow-y: auto; /* Allow body to scroll as content stacks */
    height: auto; /* Content defines height */
    -webkit-overflow-scrolling: touch; /* Smooth scrolling on iOS */
  }
  .App {
    height: auto; /* App grows with content */
    min-height: 100vh; /* But tries to fill viewport if content is short */
    overflow: visible; /* Let body scroll the app */
  }
  .App-main {
    flex-direction: column; /* Stack main panels */
    overflow: visible; /* Let body scroll the main content */
    height: auto; /* Main content grows */
  }

  .resizer {
    display: none; /* Hide resizer on mobile */
  }

  .left-panel,
  .right-panel-grid-container {
    width: 100% !important; /* Full width, override JS style */
    flex-basis: auto !important; /* Reset flex-basis if JS set it */
    max-width: 100%;
    border-right: none;
    height: auto; /* Height determined by content or min/max */
    overflow: visible; /* Let content flow, body scrolls */
  }

  .left-panel {
    min-height: 250px; /* Min height for chat */
    max-height: 60vh;  /* Max height for chat, then internal scroll */
    overflow-y: auto;  /* If chat content exceeds max-height, left-panel scrolls */
    border-bottom: 1px solid #ddd; /* Separator when stacked */
    flex-shrink: 0; /* Don't let it shrink too much when stacked */
  }
  /* Ensure chat-client itself can use the space of the now scrollable left-panel */
  .left-panel .chat-client {
      /* It's already display:flex, flex-direction:column, height:100%
         This should work within the scrollable .left-panel correctly */
  }


  .right-panel-grid-container {
    grid-template-columns: 1fr; /* Single column */
    grid-template-rows: auto;   /* Each item determines its own height */
    height: auto; /* Let content determine height */
  }

  .grid-item {
    min-height: 300px; /* Min height for each stacked item */
    height: auto;      /* Allow to grow */
    overflow: hidden; /* Content inside (e.g. terminal) should scroll */
  }
  /* Ensure scrollable areas within grid items have space */
   .grid-item .terminal-client .terminal-container-wrapper,
   .grid-item .vm-client .nomachine-iframe-container,
   .grid-item .planner-client .planner-details-container {
        min-height: 250px; /* Ensure these specific content areas are usable */
        flex-grow: 1; /* Make sure they try to fill the .grid-item */
   }

  body { font-size: 15px; }
  .App-header { padding: 6px 10px; font-size: 1em; }
  .message { font-size: 1em; }
  .input-area input, .input-area button { font-size: 1em; }
}